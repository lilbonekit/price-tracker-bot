import { Bot, GrammyError, HttpError } from 'grammy'
import { config } from '../config'
import { getProductInfo } from '../utils/scrapper'
import { extractUrls, isPromUaUrl } from '../utils/url'
import Product from '../schemas/goodSchema'
import { parsePrice } from '../utils/price'
import { InlineKeyboardButton } from 'grammy/types'

export const bot = new Bot(config.BOT_TOKEN)

bot.catch((error) => {
	const ctx = error.ctx
	console.error(`Error while handling update: ${ctx.update.update_id}`)
	const e = error.error

	if (e instanceof GrammyError) {
		console.error('Error in request:', e.description)
		return
	}

	if (e instanceof HttpError) {
		console.error('Could not contact Telegram', e)
		return
	}

	console.error('Unknown error', e)
})

bot.api.setMyCommands([
	{
		command: 'start',
		description: '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞',
	},
	{
		command: 'addproduct',
		description: '–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä',
	},
	{
		command: 'myproducts',
		description: '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏',
	},
])

bot.command('start', async (ctx) => {
	await ctx.react('ü§ù')
	await ctx.reply(
		'üëã –ü—Ä–∏–≤—ñ—Ç!\n\nüõçÔ∏è –Ø –±–æ—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ —Å–ª—ñ–¥–∫—É–≤–∞—Ç–∏ –∑–∞ —Ü—ñ–Ω–∞–º–∏ –Ω–∞ —Ç–æ–≤–∞—Ä–∏ –Ω–∞ <b>Prom.ua</b>.\n\nüí∞ –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ–≤–∞—Ä, —ñ —è –ø–æ–≤—ñ–¥–æ–º–ª—é, –∫–æ–ª–∏ —Ü—ñ–Ω–∞ –∑–º—ñ–Ω–∏—Ç—å—Å—è!\n\nüöÄ –ü–æ—á–Ω–∏ –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑ ‚Äî –¥–æ–¥–∞–π –ø–µ—Ä—à–∏–π —Ç–æ–≤–∞—Ä!',
		{
			parse_mode: 'HTML',
		}
	)
})

// Pagination
let page = 1
const PAGE_SIZE = 5

const showMyProducts = async (ctx: any, page: number) => {
	const userId = ctx?.from?.id.toString()
	const products = await Product.find({ followers: userId })

	if (products.length === 0) {
		await ctx.reply('–í–∏ —â–µ –Ω–µ –¥–æ–¥–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É')
		return
	}

	const totalPages = Math.ceil(products.length / PAGE_SIZE)

	const currentPageProducts = products.slice(
		(page - 1) * PAGE_SIZE,
		page * PAGE_SIZE
	)

	let message = `<b>–í–∞—à—ñ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏:</b>\n\n`

	currentPageProducts.forEach((product: any) => {
		message += `üì¶ <i>${product.title}</i>\n`
		message += `üí∞ –¶—ñ–Ω–∞: <b>${product.price} ${product.currency ?? ''}</b> ${
			product.unit ?? ''
		}\n`
		message += `‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî\n`
	})

	const buttons: InlineKeyboardButton[] = currentPageProducts.map(
		(product: any) => ({
			text: `‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ ${product.title}`,
			callback_data: `delete_${product._id}`,
		})
	)

	// pagination button
	const paginationButtons: InlineKeyboardButton[] = []
	if (page > 1) {
		paginationButtons.push({
			text: '‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞',
			callback_data: `page_${page - 1}`,
		})
	}
	if (page < totalPages) {
		paginationButtons.push({
			text: '‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞',
			callback_data: `page_${page + 1}`,
		})
	}

	await ctx.reply(message, { parse_mode: 'HTML' })
	await ctx.reply(
		'–û—Å—å –≤–∞—à —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤. –î–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–∫–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É:',
		{
			reply_markup: {
				inline_keyboard: [
					...buttons.map((button) => [button]),
					...paginationButtons.map((button) => [button]),
				],
			},
		}
	)
}

bot.command('myproducts', async (ctx) => {
	await showMyProducts(ctx, page)
})

bot.command('addproduct', async (ctx) => {
	await ctx.reply(
		'üîó –ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ–≤–∞—Ä –∑ Prom.ua, –∑–∞ —è–∫–∏–º –≤–∏ —Ö–æ—á–µ—Ç–µ —Å—Ç–µ–∂–∏—Ç–∏:'
	)
})

bot.on('message:entities:url', async (ctx) => {
	const { text } = ctx.message
	const urls = extractUrls(text)
	const userId = ctx.from.id.toString()

	if (urls.length) {
		await ctx.reply(`‚è≥ –û–±—Ä–æ–±–ª—é—é –ø–æ—Å–∏–ª–∞–Ω–Ω—è...`)

		for (const url of urls) {
			if (!isPromUaUrl(url)) {
				await ctx.reply(`‚ùå –¶–µ –Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ–≤–∞—Ä Prom.ua`)
				return
			}

			let product = await Product.findOne({ url })

			if (!product) {
				const productInfo = await getProductInfo(url)
				if (!productInfo || !productInfo.price) {
					await ctx.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –¥–ª—è —Ü—å–æ–≥–æ —Ç–æ–≤–∞—Ä—É.')
					return
				}

				const { price, currency, unit } = parsePrice(productInfo.price)

				product = new Product({
					title: productInfo.title,
					price,
					currency,
					unit,
					url,
					followers: [userId],
				})
				await product.save()
				await ctx.reply('‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞—à–æ–≥–æ —Å–ø–∏—Å–∫—É!')
				return
			}

			if (!product.followers.includes(userId)) {
				product.followers.push(userId)
				await product.save()
				await ctx.reply('‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞—à–æ–≥–æ —Å–ø–∏—Å–∫—É!')
			} else {
				await ctx.reply('‚ÑπÔ∏è –í–∏ –≤–∂–µ —Å—Ç–µ–∂–∏—Ç–µ –∑–∞ —Ü–∏–º —Ç–æ–≤–∞—Ä–æ–º!')
			}
		}
	}
})

bot.on('callback_query:data', async (ctx) => {
	const data = ctx.callbackQuery.data
	const userId = ctx.callbackQuery.from.id.toString()

	if (data.startsWith('delete_')) {
		const productId = data.split('_')[1]
		const product = await Product.findById(productId)

		if (!product) {
			await ctx.answerCallbackQuery({ text: '‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!' })
			return
		}

		product.followers = product.followers.filter((id) => id !== userId)
		await product.save()
		await ctx.answerCallbackQuery({
			text: 'üóë –í–∏ –±—ñ–ª—å—à–µ –Ω–µ —Å—Ç–µ–∂–∏—Ç–µ –∑–∞ —Ü–∏–º —Ç–æ–≤–∞—Ä–æ–º!',
		})
		await ctx.deleteMessage()
	}

	if (data.startsWith('page_')) {
		page = parseInt(data.split('_')[1], 10)
		await ctx.editMessageText('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...', { parse_mode: 'HTML' })
		await showMyProducts(ctx, page)
	}
})

bot.on('message', async (ctx) => {
	await ctx.reply(
		`
–Ø ‚Äî –±–æ—Ç –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ü—ñ–Ω –Ω–∞ —Ç–æ–≤–∞—Ä–∏ –∑ <b>Prom.ua</b>. –û—Å—å —â–æ —è –≤–º—ñ—é:

1Ô∏è‚É£ –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è:
   - –ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ–≤–∞—Ä –∑ <b>Prom.ua</b>, —ñ —è –¥–æ–¥–∞–º –π–æ–≥–æ –¥–æ –≤–∞—à–æ–≥–æ —Å–ø–∏—Å–∫—É.

2Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–Ω–∏:
   - –ö–æ–∂–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏ —è –ø–µ—Ä–µ–≤—ñ—Ä—è—é —Ü—ñ–Ω—É –Ω–∞ —Ç–æ–≤–∞—Ä–∏, —â–æ –≤–∏ –≤—ñ–¥—Å—Ç–µ–∂—É—î—Ç–µ, —ñ –ø–æ–≤—ñ–¥–æ–º–ª—è—é –≤–∞—Å –ø—Ä–æ –∑–º—ñ–Ω–∏.

3Ô∏è‚É£ –ü–µ—Ä–µ–≥–ª—è–¥ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤:
   - –í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏, –∑–∞ —è–∫–∏–º–∏ —Å—Ç–µ–∂–∏—Ç–µ, —Ç–∞ –≤–∏–¥–∞–ª—è—Ç–∏ —ó—Ö –∑—ñ —Å–ø–∏—Å–∫—É.

–û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:

üîπ /start ‚Äî –ü–æ—á–∞—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞.
üîπ /addproduct ‚Äî –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è.
üîπ /myproducts ‚Äî –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–∞—à—ñ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏.

–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /addproduct, —â–æ–± –¥–æ–¥–∞—Ç–∏ –ø–µ—Ä—à–∏–π —Ç–æ–≤–∞—Ä —Ç–∞ –ø–æ—á–∞—Ç–∏ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ü—ñ–Ω.

üí¨ <a href="https://t.me/lilbonekit">–ê–≤—Ç–æ—Ä —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞</a>`,
		{
			parse_mode: 'HTML',
		}
	)
})

export const startBot = async () => {
	console.log('ü§ñ Bot is starting...')
	await bot.start()
}
